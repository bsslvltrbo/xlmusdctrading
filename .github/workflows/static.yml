
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trading Platform</title>
    <style>
        .nav-buttons {
            display: flex;
            justify-content: space-evenly;
            margin-bottom: 20px;
            padding: 10px;
        }
        .nav-btn {
            background-color: #d63031;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        .nav-btn:hover {
            background-color: #ff4444;
        }
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #1a1a1a;
            color: #ffffff;
        }
        .container {
            display: grid;
            grid-template-columns: 250px 1fr 300px;
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }
        .panel {
            background-color: #2a2a2a;
            border-radius: 5px;
            padding: 15px;
        }
        .header {
            background-color: #2a2a2a;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .buy-btn {
            background-color: #00b894;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .sell-btn {
            background-color: #d63031;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .order-book {
            margin-top: 20px;
        }
        .order-book table {
            width: 100%;
            border-collapse: collapse;
        }
        .order-book th, .order-book td {
            padding: 8px;
            text-align: right;
            border-bottom: 1px solid #3a3a3a;
        }
        .chart {
            width: 100%;
            height: 400px;
            background-color: #2a2a2a;
            margin-top: 20px;
            border-radius: 5px;
        }
    </style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/stellar-sdk/10.4.1/stellar-sdk.js"></script>


<style>
.wallet-options {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.trading-btn {
    background-color: #d63031;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

.trading-btn:hover {
    background-color: #ff4444;
}

.trading-input {
    width: 100%;
    padding: 8px;
    margin: 5px 0;
    border: 1px solid #3a3a3a;
    border-radius: 5px;
    background-color: #1e1e1e;
    color: white;
}

.secret-key-group {
    display: flex;
    flex-direction: column;
}

.status-text {
    text-align: center;
    font-size: 12px;
    color: #888;
    margin-top: 5px;
}

.status-text.connected {
    color: #00b894;
}
</style>
</head>
<body>
    <div class="header">
        <div class="nav-buttons">
            <button class="nav-btn">WALLET</button>
            <button class="nav-btn">AMM</button>
            <button class="nav-btn">SWAP</button>
            <button class="nav-btn">TRANSACTIONS</button>
        </div>
        <h1>Stellar Trading Platform</h1>
        <select>
            <option>XLM/USDC</option>
            <option>USDC/XLM</option>
        </select>
    </div>
    
    <div class="container">
        <!-- Left Panel -->
        <div class="panel">
            <h3>Trading</h3>
<div class="wallet-options">
    <button id="walletconnect-btn" class="trading-btn">Connect WalletConnect</button>
    <div class="secret-key-group">
        <input type="password" id="secret-key-input" placeholder="Enter Secret Key" class="trading-input">
        <button id="secret-key-btn" class="trading-btn">Connect Secret Key</button>
    </div>
    <div id="wallet-status" class="status-text">Not Connected</div>
</div>

            <div>
                <button class="buy-btn">Buy</button>
                <button class="sell-btn">Sell</button>
            </div>
            <div style="margin-top: 20px;">
                <label>Price (USDC)</label>
                <input type="number" style="width: 100%; margin-top: 5px;">
                
                <label style="display: block; margin-top: 15px;">Amount (XLM)</label>
                <input type="number" style="width: 100%; margin-top: 5px;">
                
                <label style="display: block; margin-top: 15px;">Total (USDC)</label>
                <input type="number" style="width: 100%; margin-top: 5px;">
            </div>
        </div>
        
        <!-- Center Panel -->
        <div class="panel">
            <div class="chart">
                <!-- TradingView Widget BEGIN -->
                <div class="tradingview-widget-container" style="height:100%;width:100%">
                    <div class="tradingview-widget-container__widget" style="height:calc(100% - 32px);width:100%"></div>
                    <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank"><span class="blue-text">Track all markets on TradingView</span></a></div>
                    <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js" async>
                    {
                        "autosize": true,
                        "symbol": "NASDAQ:AAPL",
                        "interval": "D",
                        "timezone": "Etc/UTC",
                        "theme": "dark",
                        "style": "1",
                        "locale": "en",
                        "allow_symbol_change": true,
                        "calendar": false,
                        "support_host": "https://www.tradingview.com"
                    }
                    </script>
                </div>
                <!-- TradingView Widget END -->
            </div>
            
            

<div class="account-section">
    <div class="balance-container">
        <h3>Balances</h3>
        <div class="balance-item">
            <span>XLM:</span>
            <span id="xlm-balance">-</span>
        </div>
        <div class="balance-item">
            <span>USDC:</span>
            <span id="usdc-balance">-</span>
        </div>
    </div>
    
    <div class="history-container">
        <h3>Transaction History</h3>
        <div class="transaction-list" id="transaction-history">
            <!-- Transactions will be populated here -->
        </div>
    </div>
</div>

<style>
.account-section {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 20px;
    padding: 15px;
    background: #1e1e1e;
    border-radius: 5px;
    margin: 10px 0;
}

.balance-container {
    padding: 10px;
    background: #2d2d2d;
    border-radius: 4px;
}

.balance-item {
    display: flex;
    justify-content: space-between;
    padding: 8px;
    border-bottom: 1px solid #3a3a3a;
}

.history-container {
    padding: 10px;
    background: #2d2d2d;
    border-radius: 4px;
    max-height: 300px;
    overflow-y: auto;
}

.transaction-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.transaction-item {
    padding: 10px;
    background: #1e1e1e;
    border-radius: 4px;
    border-left: 3px solid;
}

.transaction-item.buy {
    border-left-color: #27ae60;
}

.transaction-item.sell {
    border-left-color: #d63031;
}

.transaction-details {
    display: flex;
    justify-content: space-between;
    color: #7f8c8d;
    font-size: 12px;
}
</style>
<div class="order-book">
    <h3>Order Book</h3>
    <table>
        <thead>
            <tr>
                <th>Price (USDC)</th>
                <th>Amount (XLM)</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <!-- Bids (Buy Orders) -->
            <tr class="bid-row" style="color: #27ae60;">
                <td>0.37747</td>
                <td>1.36531</td>
                <td>0.51537</td>
            </tr>
            <tr class="bid-row" style="color: #27ae60;">
                <td>0.37739</td>
                <td>9.31685</td>
                <td>3.51608</td>
            </tr>
            <tr class="bid-row" style="color: #27ae60;">
                <td>0.37722</td>
                <td>10.00000</td>
                <td>3.77222</td>
            </tr>
            <!-- Asks (Sell Orders) -->
            <tr class="ask-row" style="color: #d63031;">
                <td>0.37839</td>
                <td>5.73250</td>
                <td>2.16916</td>
            </tr>
            <tr class="ask-row" style="color: #d63031;">
                <td>0.37840</td>
                <td>311.50747</td>
                <td>117.87427</td>
            </tr>
            <tr class="ask-row" style="color: #d63031;">
                <td>0.37855</td>
                <td>7500.00000</td>
                <td>2839.12500</td>
            </tr>
        </tbody>
    </table>
</div>

        </div>
        
        <!-- Right Panel -->
        <div class="panel">
            <h3>Market Info</h3>
            <div>
                <p>Last Price: 0.3855 USDC</p>
                <p>24h Change: -0.10%</p>
                <p>24h Volume: 2.81M USDC</p>
            </div>
            
            <h3 style="margin-top: 20px;">Active Orders</h3>
            <div>
                <p style="color: #666;">No active orders</p>
            </div>
        </div>
    </div>
<script>
// Initialize Stellar connection
const server = new StellarSdk.Server('https://horizon.stellar.org');

// Define XLM/USDC trading pair
const xlmAsset = StellarSdk.Asset.native();
const usdcAsset = new StellarSdk.Asset(
    'USDC', 
    'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN'
);

// Update order book data
async function updateOrderBookData() {
    try {
        const orderbook = await server.orderbook(xlmAsset, usdcAsset)
            .limit(3)  // Get 3 rows for each side
            .call();
            
        // Format bids (buy orders)
        const formattedBids = orderbook.bids.map(bid => ({
            price: parseFloat(bid.price).toFixed(5),
            amount: parseFloat(bid.amount).toFixed(5),
            total: (parseFloat(bid.price) * parseFloat(bid.amount)).toFixed(5)
        }));

        // Format asks (sell orders)
        const formattedAsks = orderbook.asks.map(ask => ({
            price: parseFloat(ask.price).toFixed(5),
            amount: parseFloat(ask.amount).toFixed(5),
            total: (parseFloat(ask.price) * parseFloat(ask.amount)).toFixed(5)
        }));

        // Update the display
        updateOrderBookDisplay(formattedBids, formattedAsks);
    } catch (error) {
        console.error('Failed to update order book:', error);
    }
}

// Update the display
function updateOrderBookDisplay(bids, asks) {
    // Update bid rows (green)
    const bidRows = document.querySelectorAll('.bid-row');
    bids.forEach((bid, index) => {
        if (bidRows[index]) {
            bidRows[index].children[0].textContent = bid.price;
            bidRows[index].children[1].textContent = bid.amount;
            bidRows[index].children[2].textContent = bid.total;
        }
    });

    // Update ask rows (red)
    const askRows = document.querySelectorAll('.ask-row');
    asks.forEach((ask, index) => {
        if (askRows[index]) {
            askRows[index].children[0].textContent = ask.price;
            askRows[index].children[1].textContent = ask.amount;
            askRows[index].children[2].textContent = ask.total;
        }
    });
}

// Start updates when document is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Initial update
    updateOrderBookData();
    
    // Update every 2 seconds
    setInterval(updateOrderBookData, 2000);
});
</script><script>
// WalletConnect Integration
let walletConnector;

async function initWalletConnect() {
    try {
        walletConnector = await WalletConnect.init({
            projectId: 'YOUR_PROJECT_ID', // Replace with actual project ID
            chains: ['stellar:pubnet'],
            metadata: {
                name: 'Stellar Trading Platform',
                description: 'XLM/USDC Trading Platform',
                url: window.location.host,
                icons: ['https://avatars.githubusercontent.com/u/37784886']
            }
        });

        // Add connect button listener
        document.querySelector('.connect-wallet').addEventListener('click', connectWallet);
    } catch (err) {
        console.error('Failed to initialize WalletConnect:', err);
    }
}

async function connectWallet() {
    try {
        const session = await walletConnector.connect({
            requiredNamespaces: {
                stellar: {
                    methods: ['sign_transaction'],
                    chains: ['stellar:pubnet'],
                    events: ['accountsChanged']
                }
            }
        });
        
        // Store the public key
        const publicKey = session.namespaces.stellar.accounts[0];
        document.querySelector('.wallet-status').textContent = 'Connected: ' + publicKey.slice(0, 6) + '...' + publicKey.slice(-4);
        
        // Enable trading buttons
        enableTrading();
    } catch (err) {
        console.error('Failed to connect wallet:', err);
    }
}

async function submitTrade(side, price, amount) {
    if (!walletConnector?.session) {
        alert('Please connect your wallet first');
        return;
    }

    try {
        const account = await server.loadAccount(walletConnector.session.namespaces.stellar.accounts[0]);
        
        const operation = side === 'buy' 
            ? StellarSdk.Operation.manageBuyOffer({
                selling: xlmAsset,
                buying: usdcAsset,
                buyAmount: amount.toString(),
                price: price.toString()
            })
            : StellarSdk.Operation.manageSellOffer({
                selling: xlmAsset,
                buying: usdcAsset,
                amount: amount.toString(),
                price: price.toString()
            });

        const transaction = new StellarSdk.TransactionBuilder(account, {
            fee: await server.fetchBaseFee(),
            networkPassphrase: StellarSdk.Networks.PUBLIC
        })
        .addOperation(operation)
        .setTimeout(30)
        .build();

        const signedTransaction = await walletConnector.request({
            topic: walletConnector.session.topic,
            chainId: 'stellar:pubnet',
            request: {
                method: 'sign_transaction',
                params: {
                    xdr: transaction.toXDR()
                }
            }
        });

        const result = await server.submitTransaction(StellarSdk.TransactionBuilder.fromXDR(
            signedTransaction,
            StellarSdk.Networks.PUBLIC
        ));

        console.log('Trade submitted successfully:', result);
        alert('Trade executed successfully!');
    } catch (err) {
        console.error('Trade failed:', err);
        alert('Trade failed: ' + err.message);
    }
}

function enableTrading() {
    const tradeButtons = document.querySelectorAll('.trade-button');
    tradeButtons.forEach(button => button.disabled = false);
}








document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('walletconnect-btn').addEventListener('click', connectWithWalletConnect);
});
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/stellar-sdk/10.4.1/stellar-sdk.js"></script>
<script>
// Initialize Stellar SDK
const server = new StellarSdk.Server('https://horizon.stellar.org');
StellarSdk.Network.usePublicNetwork();

let currentAccount = null;

// Secret key functionality
async function connectWithSecretKey() {
    const secretKeyInput = document.getElementById('secret-key-input');
    const secretKey = secretKeyInput.value.trim();
    
    if (!secretKey) {
        updateWalletStatus(false, 'Please enter your secret key');
        return;
    }

    try {
        const keypair = StellarSdk.Keypair.fromSecret(secretKey);
        const publicKey = keypair.publicKey();
        
        // Load account details
        const account = await server.loadAccount(publicKey);
        currentAccount = {
            keypair: keypair,
            publicKey: publicKey,
            account: account
        };
        
        updateWalletStatus(true, publicKey);
        secretKeyInput.value = '';
        enableTradingButtons();
        
        // Start account listener
        startAccountListener(publicKey);
    } catch (err) {
        console.error('Connection error:', err);
        updateWalletStatus(false, 'Invalid secret key or network error');
    }
}

// Start listening for account updates
function startAccountListener(publicKey) {
    const es = server.accounts().accountId(publicKey).stream({
        onmessage: async (account) => {
            currentAccount.account = account;
            console.log('Account updated:', account);
        },
        onerror: (error) => {
            console.error('Account stream error:', error);
        }
    });
}

// Trading functionality
async function submitTrade(type, amount, price) {
    if (!currentAccount) {
        alert('Please connect your wallet first');
        return;
    }

    try {
        const asset = new StellarSdk.Asset('USDC', 'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN');
        const operation = type === 'buy' 
            ? StellarSdk.Operation.manageBuyOffer({
                selling: StellarSdk.Asset.native(),
                buying: asset,
                buyAmount: amount.toString(),
                price: price.toString()
            })
            : StellarSdk.Operation.manageSellOffer({
                selling: asset,
                buying: StellarSdk.Asset.native(),
                amount: amount.toString(),
                price: price.toString()
            });

        const transaction = new StellarSdk.TransactionBuilder(currentAccount.account, {
            fee: await server.fetchBaseFee(),
            networkPassphrase: StellarSdk.Networks.PUBLIC
        })
        .addOperation(operation)
        .setTimeout(30)
        .build();

        transaction.sign(currentAccount.keypair);
        const result = await server.submitTransaction(transaction);
        console.log('Trade submitted successfully:', result);
        alert('Trade submitted successfully!');
    } catch (error) {
        console.error('Trade submission failed:', error);
        alert('Trade submission failed: ' + error.message);
    }
}

// Add event listeners
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('secret-key-btn').addEventListener('click', connectWithSecretKey);
    
    // Add trade submission listeners
    document.querySelector('.buy-btn').addEventListener('click', () => {
        const amount = prompt('Enter amount to buy:');
        const price = prompt('Enter price:');
        if (amount && price) {
            submitTrade('buy', amount, price);
        }
    });
    
    document.querySelector('.sell-btn').addEventListener('click', () => {
        const amount = prompt('Enter amount to sell:');
        const price = prompt('Enter price:');
        if (amount && price) {
            submitTrade('sell', amount, price);
        }
    });
});
</script>

<script>
// Trading functionality
async function submitTrade(type, amount, price) {
    if (!currentAccount && !connector) {
        alert('Please connect your wallet first');
        return;
    }

    try {
        // Validate input parameters
        if (!amount || isNaN(amount) || amount <= 0) {
            throw new Error('Invalid amount');
        }
        if (!price || isNaN(price) || price <= 0) {
            throw new Error('Invalid price');
        }

        // Get the current account
        let account;
        if (currentAccount) {
            account = currentAccount.account;
        } else if (connector && connector.connected) {
            const [address] = await connector.sendCustomRequest({
                method: 'stellar_getPublicKey'
            });
            account = await server.loadAccount(address);
        } else {
            throw new Error('No wallet connected');
        }

        // Create the asset
        const asset = new StellarSdk.Asset('USDC', 'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN');
        
        // Create the operation
        const operation = type === 'buy' 
            ? StellarSdk.Operation.manageBuyOffer({
                selling: StellarSdk.Asset.native(),
                buying: asset,
                buyAmount: amount.toString(),
                price: price.toString()
            })
            : StellarSdk.Operation.manageSellOffer({
                selling: asset,
                buying: StellarSdk.Asset.native(),
                amount: amount.toString(),
                price: price.toString()
            });

        // Build the transaction
        const transaction = new StellarSdk.TransactionBuilder(account, {
            fee: await server.fetchBaseFee(),
            networkPassphrase: StellarSdk.Networks.PUBLIC
        })
        .addOperation(operation)
        .setTimeout(30)
        .build();

        // Sign and submit the transaction
        if (currentAccount) {
            transaction.sign(currentAccount.keypair);
            const result = await server.submitTransaction(transaction);
            console.log('Trade submitted successfully:', result);
            alert('Trade submitted successfully!');
        } else if (connector && connector.connected) {
            const signedXdr = await connector.sendCustomRequest({
                method: 'stellar_signTransaction',
                params: {
                    xdr: transaction.toXDR()
                }
            });
            const signedTransaction = new StellarSdk.Transaction(signedXdr, StellarSdk.Networks.PUBLIC);
            const result = await server.submitTransaction(signedTransaction);
            console.log('Trade submitted successfully:', result);
            alert('Trade submitted successfully!');
        }
    } catch (error) {
        console.error('Trade submission failed:', error);
        alert('Trade submission failed: ' + error.message);
    }
}

// Add event listeners for buy/sell buttons
document.addEventListener('DOMContentLoaded', () => {
    const buyBtn = document.querySelector('.buy-btn');
    const sellBtn = document.querySelector('.sell-btn');
    
    if (buyBtn) {
        buyBtn.addEventListener('click', () => {
            const amount = prompt('Enter amount to buy:');
            const price = prompt('Enter price:');
            if (amount && price) {
                submitTrade('buy', parseFloat(amount), parseFloat(price));
            }
        });
    }
    
    if (sellBtn) {
        sellBtn.addEventListener('click', () => {
            const amount = prompt('Enter amount to sell:');
            const price = prompt('Enter price:');
            if (amount && price) {
                submitTrade('sell', parseFloat(amount), parseFloat(price));
            }
        });
    }
});
</script>

<!-- Required SDKs -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/stellar-sdk/10.4.1/stellar-sdk.js"></script>
<script src="https://unpkg.com/@walletconnect/web3-provider@1.8.0/dist/umd/index.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@walletconnect/client@1.8.0/dist/umd/index.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@walletconnect/qrcode-modal@1.8.0/dist/umd/index.min.js"></script>

<script>
// Global variables
let currentWallet = null;
const server = new StellarSdk.Server('https://horizon.stellar.org');
StellarSdk.Network.usePublicNetwork();

// WalletConnect initialization
async function initWalletConnect() {
    try {
        const connector = new WalletConnect({
            bridge: 'https://bridge.walletconnect.org',
            qrcodeModal: QRCodeModal
        });

        // Subscribe to connection events
        connector.on('connect', (error, payload) => {
            if (error) {
                console.error('WalletConnect connection error:', error);
                updateWalletStatus(false, 'Connection failed');
                return;
            }

            const { accounts } = payload.params[0];
            if (accounts && accounts.length > 0) {
                currentWallet = {
                    type: 'walletconnect',
                    connector: connector,
                    publicKey: accounts[0]
                };
                updateWalletStatus(true, accounts[0]);
                enableTradingButtons();
            }
        });

        connector.on('disconnect', () => {
            currentWallet = null;
            updateWalletStatus(false);
            disableTradingButtons();
        });

        if (!connector.connected) {
            await connector.createSession();
        }

        return connector;
    } catch (error) {
        console.error('WalletConnect initialization error:', error);
        updateWalletStatus(false, 'Initialization failed');
        throw error;
    }
}

// Secret Key connection
async function connectWithSecretKey() {
    const secretKeyInput = document.getElementById('secret-key-input');
    const secretKey = secretKeyInput.value.trim();
    
    if (!secretKey) {
        updateWalletStatus(false, 'Please enter a secret key');
        return;
    }

    try {
        const keypair = StellarSdk.Keypair.fromSecret(secretKey);
        const publicKey = keypair.publicKey();
        
        // Test loading the account
        const account = await server.loadAccount(publicKey);
        
        currentWallet = {
            type: 'secret',
            keypair: keypair,
            publicKey: publicKey,
            account: account
        };

        secretKeyInput.value = '';
        updateWalletStatus(true, publicKey);
        enableTradingButtons();
        
        // Start account listener
        startAccountListener(publicKey);
    } catch (error) {
        console.error('Secret key connection error:', error);
        updateWalletStatus(false, 'Invalid secret key or network error');
        currentWallet = null;
        disableTradingButtons();
    }
}

// Account listener
function startAccountListener(publicKey) {
    const es = server.accounts().accountId(publicKey).stream({
        onmessage: async (account) => {
            if (currentWallet && currentWallet.type === 'secret') {
                currentWallet.account = account;
            }
            console.log('Account updated:', account);
        },
        onerror: (error) => {
            console.error('Account stream error:', error);
        }
    });
}

// UI update functions
function updateWalletStatus(connected, message = '') {
    const statusElement = document.getElementById('wallet-status');
    if (connected) {
        statusElement.textContent = message ? 'Connected: ' + message.substring(0, 10) + '...' : 'Connected';
        statusElement.classList.add('connected');
    } else {
        statusElement.textContent = message || 'Not Connected';
        statusElement.classList.remove('connected');
    }
}

function enableTradingButtons() {
    const buyBtn = document.querySelector('.buy-btn');
    const sellBtn = document.querySelector('.sell-btn');
    if (buyBtn) buyBtn.disabled = false;
    if (sellBtn) sellBtn.disabled = false;
}

function disableTradingButtons() {
    const buyBtn = document.querySelector('.buy-btn');
    const sellBtn = document.querySelector('.sell-btn');
    if (buyBtn) buyBtn.disabled = true;
    if (sellBtn) sellBtn.disabled = true;
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
    // WalletConnect button
    const walletConnectBtn = document.getElementById('walletconnect-btn');
    if (walletConnectBtn) {
        walletConnectBtn.addEventListener('click', async () => {
            try {
                await initWalletConnect();
            } catch (error) {
                console.error('WalletConnect error:', error);
                updateWalletStatus(false, 'Connection failed');
            }
        });
    }

    // Secret key button
    const secretKeyBtn = document.getElementById('secret-key-btn');
    if (secretKeyBtn) {
        secretKeyBtn.addEventListener('click', connectWithSecretKey);
    }

    // Initialize buttons as disabled
    disableTradingButtons();
});
</script>

<script>
// Debug logging for wallet connections
function debugLog(message, data = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${message}`, data || '');
    
    // Also update the UI status for better visibility
    const statusElement = document.getElementById('wallet-status');
    if (statusElement) {
        statusElement.setAttribute('title', `${timestamp}: ${message}`);
    }
}

// Override the existing updateWalletStatus function to include debug logging
const originalUpdateWalletStatus = updateWalletStatus;
updateWalletStatus = function(connected, message = '') {
    debugLog(`Wallet status update - Connected: ${connected}, Message: ${message}`);
    originalUpdateWalletStatus(connected, message);
};

// Add debug logging to wallet connection attempts
document.addEventListener('DOMContentLoaded', () => {
    debugLog('Page loaded, initializing wallet connections');
    
    const walletConnectBtn = document.getElementById('walletconnect-btn');
    if (walletConnectBtn) {
        walletConnectBtn.addEventListener('click', () => {
            debugLog('WalletConnect button clicked');
        });
    }
    
    const secretKeyBtn = document.getElementById('secret-key-btn');
    if (secretKeyBtn) {
        secretKeyBtn.addEventListener('click', () => {
            debugLog('Secret Key button clicked');
        });
    }
});
</script>

<script>
// SEP-0007 URI Scheme Handling
function generateSEP7URI(operation, params) {
    const baseURI = 'web+stellar:' + operation;
    const queryParams = new URLSearchParams(params).toString();
    return baseURI + '?' + queryParams;
}

function handleSEP7Request() {
    const operation = 'pay'; // Example operation
    const params = {
        destination: 'GABCD1234EXAMPLEDESTINATION',
        amount: '10',
        asset_code: 'XLM'
    };

    const sep7URI = generateSEP7URI(operation, params);
    console.log('Generated SEP-0007 URI:', sep7URI);

    // Redirect to the wallet with the SEP-0007 URI
    window.location.href = sep7URI;
}

// Add event listener for a button to trigger SEP-0007 request
document.addEventListener('DOMContentLoaded', () => {
    const sep7Button = document.getElementById('sep7-btn');
    if (sep7Button) {
        sep7Button.addEventListener('click', handleSEP7Request);
    }
});
</script>

<script src="https://unpkg.com/@stellar/freighter-api"></script>
<script>
// Check if Freighter is installed
function isFreighterInstalled() {
    return typeof freighterApi !== 'undefined';
}

// Connect to Freighter wallet
async function connectFreighter() {
    if (!isFreighterInstalled()) {
        alert('Freighter wallet is not installed. Please install it to continue.');
        return;
    }

    try {
        const publicKey = await freighterApi.getPublicKey();
        updateWalletStatus(true, publicKey);
        enableTradingButtons();
        console.log('Connected to Freighter wallet:', publicKey);
    } catch (error) {
        console.error('Freighter connection error:', error);
        updateWalletStatus(false, 'Connection failed');
    }
}

// Add event listener for Freighter connection button
document.addEventListener('DOMContentLoaded', () => {
    const freighterButton = document.getElementById('freighter-btn');
    if (freighterButton) {
        freighterButton.addEventListener('click', connectFreighter);
    }
});
</script>

<script>
// SEP-0010 Authentication
async function authenticateWithSEP10(domain, publicKey) {
    try {
        // Step 1: Get challenge transaction
        const response = await fetch(`https://${domain}/auth?account=${publicKey}`);
        const { transaction: challengeTx } = await response.json();

        // Step 2: Sign the challenge transaction
        const signedTransaction = await freighterApi.signTransaction(challengeTx);

        // Step 3: Submit signed challenge
        const authResponse = await fetch(`https://${domain}/auth`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                transaction: signedTransaction
            })
        });

        const { token } = await authResponse.json();
        return token;
    } catch (error) {
        console.error('SEP-0010 authentication error:', error);
        throw error;
    }
}

// Add SEP-0010 authentication to Freighter connection
async function connectWithSEP10() {
    if (!isFreighterInstalled()) {
        alert('Freighter wallet is not installed. Please install it to continue.');
        return;
    }

    try {
        const publicKey = await freighterApi.getPublicKey();
        const authToken = await authenticateWithSEP10('horizon.stellar.org', publicKey);
        
        // Store the auth token for future use
        localStorage.setItem('stellar_auth_token', authToken);
        
        updateWalletStatus(true, publicKey);
        enableTradingButtons();
        console.log('Authenticated with SEP-0010');
    } catch (error) {
        console.error('SEP-0010 authentication error:', error);
        updateWalletStatus(false, 'Authentication failed');
    }
}

// Update event listener to use SEP-0010 authentication
document.addEventListener('DOMContentLoaded', () => {
    const freighterButton = document.getElementById('freighter-btn');
    if (freighterButton) {
        freighterButton.addEventListener('click', connectWithSEP10);
    }
});
</script>

<script>
// Transaction signing flow
async function signTransaction(xdr) {
    try {
        // Sign transaction using Freighter
        const signedXDR = await freighterApi.signTransaction(xdr);
        return signedXDR;
    } catch (error) {
        console.error('Transaction signing error:', error);
        throw error;
    }
}

// Submit transaction to network
async function submitTransaction(signedXDR) {
    try {
        const server = new StellarSdk.Server('https://horizon.stellar.org');
        const transaction = StellarSdk.TransactionBuilder.fromXDR(
            signedXDR,
            StellarSdk.Networks.PUBLIC
        );
        
        const result = await server.submitTransaction(transaction);
        return result;
    } catch (error) {
        console.error('Transaction submission error:', error);
        throw error;
    }
}

// Create and sign a transaction
async function createAndSignTransaction(operation) {
    try {
        const publicKey = await freighterApi.getPublicKey();
        const server = new StellarSdk.Server('https://horizon.stellar.org');
        const account = await server.loadAccount(publicKey);
        
        const transaction = new StellarSdk.TransactionBuilder(account, {
            fee: await server.fetchBaseFee(),
            networkPassphrase: StellarSdk.Networks.PUBLIC
        })
        .addOperation(operation)
        .setTimeout(30)
        .build();

        const xdr = transaction.toXDR();
        const signedXDR = await signTransaction(xdr);
        return signedXDR;
    } catch (error) {
        console.error('Transaction creation error:', error);
        throw error;
    }
}

// Execute trade
async function executeTrade(type, amount, price) {
    try {
        const asset = new StellarSdk.Asset(
            'USDC',
            'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN'
        );

        const operation = type === 'buy'
            ? StellarSdk.Operation.manageBuyOffer({
                selling: StellarSdk.Asset.native(),
                buying: asset,
                buyAmount: amount.toString(),
                price: price.toString()
            })
            : StellarSdk.Operation.manageSellOffer({
                selling: asset,
                buying: StellarSdk.Asset.native(),
                amount: amount.toString(),
                price: price.toString()
            });

        const signedXDR = await createAndSignTransaction(operation);
        const result = await submitTransaction(signedXDR);
        
        console.log('Trade executed successfully:', result);
        alert('Trade executed successfully!');
    } catch (error) {
        console.error('Trade execution error:', error);
        alert('Trade execution failed: ' + error.message);
    }
}

// Update trading buttons to use new execution flow
document.addEventListener('DOMContentLoaded', () => {
    const buyBtn = document.querySelector('.buy-btn');
    const sellBtn = document.querySelector('.sell-btn');
    
    if (buyBtn) {
        buyBtn.addEventListener('click', async () => {
            const amount = prompt('Enter amount to buy:');
            const price = prompt('Enter price:');
            if (amount && price) {
                await executeTrade('buy', parseFloat(amount), parseFloat(price));
            }
        });
    }
    
    if (sellBtn) {
        sellBtn.addEventListener('click', async () => {
            const amount = prompt('Enter amount to sell:');
            const price = prompt('Enter price:');
            if (amount && price) {
                await executeTrade('sell', parseFloat(amount), parseFloat(price));
            }
        });
    }
});
</script>

<script>
// Test functionality
async function testWalletConnection() {
    try {
        // Test Freighter connection
        if (!isFreighterInstalled()) {
            throw new Error('Freighter wallet not installed');
        }
        
        const publicKey = await freighterApi.getPublicKey();
        console.log('Freighter connection successful:', publicKey);
        
        // Test SEP-0010 authentication
        const authToken = await authenticateWithSEP10('horizon.stellar.org', publicKey);
        console.log('SEP-0010 authentication successful');
        
        // Test transaction creation
        const server = new StellarSdk.Server('https://horizon.stellar.org');
        const account = await server.loadAccount(publicKey);
        console.log('Account loaded successfully');
        
        // Create a test transaction (without submitting)
        const asset = new StellarSdk.Asset(
            'USDC',
            'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN'
        );
        
        const operation = StellarSdk.Operation.manageBuyOffer({
            selling: StellarSdk.Asset.native(),
            buying: asset,
            buyAmount: '1',
            price: '1'
        });
        
        const transaction = new StellarSdk.TransactionBuilder(account, {
            fee: await server.fetchBaseFee(),
            networkPassphrase: StellarSdk.Networks.PUBLIC
        })
        .addOperation(operation)
        .setTimeout(30)
        .build();
        
        console.log('Test transaction created successfully');
        
        return {
            success: true,
            message: 'All tests passed successfully'
        };
    } catch (error) {
        console.error('Test failed:', error);
        return {
            success: false,
            message: error.message
        };
    }
}

// Add test button
document.addEventListener('DOMContentLoaded', () => {
    const testButton = document.createElement('button');
    testButton.id = 'test-connection-btn';
    testButton.textContent = 'Test Connection';
    testButton.addEventListener('click', async () => {
        const result = await testWalletConnection();
        alert(result.success ? 'Tests passed!' : 'Tests failed: ' + result.message);
    });
    
    // Add button to the document
    const container = document.querySelector('.wallet-container') || document.body;
    container.appendChild(testButton);
});

// Error handling wrapper for trade execution
async function safeExecuteTrade(type, amount, price) {
    try {
        // Input validation
        if (!amount || isNaN(amount) || amount <= 0) {
            throw new Error('Invalid amount');
        }
        if (!price || isNaN(price) || price <= 0) {
            throw new Error('Invalid price');
        }
        
        // Check wallet connection
        if (!await isFreighterInstalled()) {
            throw new Error('Freighter wallet not installed');
        }
        
        // Check authentication
        const authToken = localStorage.getItem('stellar_auth_token');
        if (!authToken) {
            throw new Error('Not authenticated. Please connect wallet first.');
        }
        
        // Execute trade with proper error handling
        await executeTrade(type, amount, price);
        
    } catch (error) {
        console.error('Trade execution error:', error);
        alert('Trade failed: ' + error.message);
        throw error;
    }
}

// Update trading buttons to use safe execution
document.addEventListener('DOMContentLoaded', () => {
    const buyBtn = document.querySelector('.buy-btn');
    const sellBtn = document.querySelector('.sell-btn');
    
    if (buyBtn) {
        buyBtn.addEventListener('click', async () => {
            try {
                const amount = prompt('Enter amount to buy:');
                const price = prompt('Enter price:');
                if (amount && price) {
                    await safeExecuteTrade('buy', parseFloat(amount), parseFloat(price));
                }
            } catch (error) {
                console.error('Buy operation failed:', error);
            }
        });
    }
    
    if (sellBtn) {
        sellBtn.addEventListener('click', async () => {
            try {
                const amount = prompt('Enter amount to sell:');
                const price = prompt('Enter price:');
                if (amount && price) {
                    await safeExecuteTrade('sell', parseFloat(amount), parseFloat(price));
                }
            } catch (error) {
                console.error('Sell operation failed:', error);
            }
        });
    }
});
</script>

<script>
// Initialize Stellar SDK
const server = new StellarSdk.Server('https://horizon.stellar.org');
StellarSdk.Network.usePublicNetwork();

// Configuration for the trading platform
const CONFIG = {
    HORIZON_URL: 'https://horizon.stellar.org',
    NETWORK_PASSPHRASE: StellarSdk.Networks.PUBLIC,
    ASSET_CODE: 'USDC',
    ASSET_ISSUER: 'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN'
};

// Initialize trading platform
async function initializeTradingPlatform() {
    try {
        // Check if Freighter is installed
        if (!isFreighterInstalled()) {
            console.log('Freighter not installed. Please install Freighter to continue.');
            return false;
        }

        // Initialize Stellar SDK
        const server = new StellarSdk.Server(CONFIG.HORIZON_URL);
        
        // Test connection to Horizon
        const networkHealth = await server.getHealth();
        console.log('Network health:', networkHealth);
        
        // Initialize event listeners
        initializeEventListeners();
        
        return true;
    } catch (error) {
        console.error('Failed to initialize trading platform:', error);
        return false;
    }
}

// Initialize event listeners
function initializeEventListeners() {
    // Listen for network changes
    window.addEventListener('stellar:networkChanged', async () => {
        console.log('Network changed, reinitializing...');
        await initializeTradingPlatform();
    });
    
    // Listen for account changes
    window.addEventListener('stellar:accountChanged', async () => {
        console.log('Account changed, updating...');
        await updateAccountInfo();
    });
}

// Update account information
async function updateAccountInfo() {
    try {
        const publicKey = await freighterApi.getPublicKey();
        const account = await server.loadAccount(publicKey);
        console.log('Account updated:', account.accountId());
        return account;
    } catch (error) {
        console.error('Failed to update account info:', error);
        throw error;
    }
}

// Initialize platform when document is ready
document.addEventListener('DOMContentLoaded', async () => {
    const initialized = await initializeTradingPlatform();
    console.log('Trading platform initialized:', initialized);
});
</script>
<script>

// Initialize Stellar SDK
const server = new StellarSdk.Server('https://horizon.stellar.org');

class StellarWallet {
    constructor() {
        this.keypair = null;
        this.account = null;
        this.connected = false;
    }

    async connect(secretKey) {
        try {
            this.keypair = StellarSdk.Keypair.fromSecret(secretKey);
            this.account = await server.loadAccount(this.keypair.publicKey());
            this.connected = true;
            return {
                publicKey: this.keypair.publicKey(),
                balances: this.account.balances
            };
        } catch (error) {
            console.error('Connection error:', error);
            throw error;
        }
    }

    async getBalances() {
        if (!this.connected) throw new Error('Wallet not connected');
        this.account = await server.loadAccount(this.keypair.publicKey());
        return this.account.balances;
    }

    async executeTrade(type, amount, price) {
        if (!this.connected) throw new Error('Wallet not connected');
        // Implement trade execution logic here
        console.log(`Executing ${type} trade: Amount=${amount}, Price=${price}`);
    }
}

// Initialize wallet
const wallet = new StellarWallet();

// Add event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const secretKeyBtn = document.getElementById('secret-key-btn');
    const secretKeyInput = document.getElementById('secret-key-input');
    const buyBtn = document.querySelector('.buy-btn');
    const sellBtn = document.querySelector('.sell-btn');
    const amountInputs = document.querySelectorAll('input[type="number"]');

    if (secretKeyBtn && secretKeyInput) {
        secretKeyBtn.addEventListener('click', async () => {
            const secretKey = secretKeyInput.value.trim();
            
            if (!secretKey) {
                alert('Please enter a secret key');
                return;
            }

            try {
                secretKeyBtn.textContent = 'Connecting...';
                const result = await wallet.connect(secretKey);
                secretKeyBtn.textContent = 'Connected';
                secretKeyBtn.disabled = true;
                
                // Clear the secret key input for security
                secretKeyInput.value = '';
                
                console.log('Connected successfully:', result);
                
                // Enable trading buttons after successful connection
                if (buyBtn) buyBtn.disabled = false;
                if (sellBtn) sellBtn.disabled = false;
                
            } catch (error) {
                secretKeyBtn.textContent = 'Connect Secret Key';
                alert('Connection error: ' + error.message);
                console.error('Failed to connect:', error);
            }
        });
    }

    // Buy button handler
    if (buyBtn) {
        buyBtn.addEventListener('click', async () => {
            if (!wallet.connected) {
                alert('Please connect your wallet first');
                return;
            }
            
            const amount = amountInputs[0]?.value;
            const price = amountInputs[1]?.value;
            
            if (!amount || !price) {
                alert('Please enter amount and price');
                return;
            }

            try {
                await wallet.executeTrade('buy', amount, price);
                alert('Buy order placed successfully');
            } catch (error) {
                alert('Trade error: ' + error.message);
            }
        });
    }

    // Sell button handler
    if (sellBtn) {
        sellBtn.addEventListener('click', async () => {
            if (!wallet.connected) {
                alert('Please connect your wallet first');
                return;
            }
            
            const amount = amountInputs[0]?.value;
            const price = amountInputs[1]?.value;
            
            if (!amount || !price) {
                alert('Please enter amount and price');
                return;
            }

            try {
                await wallet.executeTrade('sell', amount, price);
                alert('Sell order placed successfully');
            } catch (error) {
                alert('Trade error: ' + error.message);
            }
        });
    }
});

</script>
</body>
</html>
# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
